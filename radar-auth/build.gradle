plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'signing'
}

apply plugin: 'maven-publish'

ext {
    jacksonVersion = '2.11.4'
    jacksonYamlVersion = '2.11.4'
    okhttpVersion = '4.9.0'
    oauthJwtVersion = '3.12.0'
    commonsCodecVersion = '1.15'
    slf4jVersion = '1.7.30'
}

description = 'Library for authentication and authorization of JWT tokens issued by the RADAR platform'

repositories {
    jcenter()
    mavenLocal()
}

configurations {
    testCompile.extendsFrom shadow
}

dependencies {
    implementation project(path: ':radar-auth:deprecated-auth0', configuration: 'shadow')
    shadow "commons-codec:commons-codec:$commonsCodecVersion"

    shadow group: 'com.auth0', name: 'java-jwt', version: oauthJwtVersion
    shadow group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttpVersion

    shadow group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    shadow group: 'com.fasterxml.jackson.core' , name: 'jackson-databind' , version: jacksonVersion
    shadow group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonYamlVersion

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version: '2.21.0'
    testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'

    testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

shadowJar {
    archiveClassifier.set(null)
    conventionMapping.with {
        map('classifier') {
            null
        }
    }
}

def sharedManifest = manifest {
    attributes("Implementation-Title": project.name,
            "Implementation-Version": version)
}

jar {
    enabled = false
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    manifest.from sharedManifest
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    manifest.from sharedManifest
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJar(MavenPublication) {
            publication -> project.shadow.component(publication)
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = project.name
                description = project.description
                url = githubUrl
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'dennyverbeeck'
                        name = 'Denny Verbeeck'
                        email = 'dverbeec@its.jnj.com'
                        organization = 'Janssen R&D'
                    }
                    developer {
                        id = 'blootsvoets'
                        name = 'Joris Borgdorff'
                        email = 'joris@thehyve.nl'
                        organization = 'The Hyve'
                    }
                    developer {
                        id = 'nivemaham'
                        name = 'Nivethika Mahasivam'
                        email = 'nivethika@thehyve.nl'
                        organization = 'The Hyve'
                    }
                }
                issueManagement {
                    system = 'GitHub'
                    url = githubUrl + '/issues'
                }
                organization {
                    name = 'RADAR-base'
                    url = website
                }
                scm {
                    connection = 'scm:git:' + githubUrl
                    url = githubUrl
                }
            }
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && it.artifactId.text() == 'java-jwt'
                }.each { it.scope*.value = 'compile'}
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            credentials {
                username = project.hasProperty("ossrh.user") ? project.property("ossrh.user") : System.getenv("OSSRH_USER")
                password = project.hasProperty("ossrh.password") ? project.property("ossrh.password") : System.getenv("OSSRH_PASSWORD")
            }

            def releasesRepoUrl = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            def snapshotsRepoUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
            url = version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    useGpgCmd()
    required { true }
    sign(tasks["sourcesJar"], tasks["javadocJar"])
    sign(publishing.publications["mavenJar"])
}

apply from: '../gradle/style.gradle'
