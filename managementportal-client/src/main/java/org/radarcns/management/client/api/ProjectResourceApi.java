/*
 * ManagementPortal API
 * ManagementPortal API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.radarcns.management.client.api;

import org.radarcns.management.client.ApiCallback;
import org.radarcns.management.client.ApiClient;
import org.radarcns.management.client.ApiException;
import org.radarcns.management.client.ApiResponse;
import org.radarcns.management.client.Configuration;
import org.radarcns.management.client.Pair;
import org.radarcns.management.client.ProgressRequestBody;
import org.radarcns.management.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.radarcns.management.client.model.ProjectDTO;
import org.radarcns.management.client.model.ResponseEntity;
import org.radarcns.management.client.model.RoleDTO;
import org.radarcns.management.client.model.SourceTypeDTO;
import org.radarcns.management.client.model.SubjectDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectResourceApi {
    private ApiClient apiClient;

    public ProjectResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createProjectUsingPOST */
    private com.squareup.okhttp.Call createProjectUsingPOSTCall(ProjectDTO projectDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = projectDTO;
        
        // create path and map variables
        String localVarPath = "/api/projects".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProjectUsingPOSTValidateBeforeCall(ProjectDTO projectDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectDTO' is set
        if (projectDTO == null) {
            throw new ApiException("Missing the required parameter 'projectDTO' when calling createProjectUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createProjectUsingPOSTCall(projectDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * createProject
     * 
     * @param projectDTO projectDTO (required)
     * @return ProjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectDTO createProjectUsingPOST(ProjectDTO projectDTO) throws ApiException {
        ApiResponse<ProjectDTO> resp = createProjectUsingPOSTWithHttpInfo(projectDTO);
        return resp.getData();
    }

    /**
     * createProject
     * 
     * @param projectDTO projectDTO (required)
     * @return ApiResponse&lt;ProjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectDTO> createProjectUsingPOSTWithHttpInfo(ProjectDTO projectDTO) throws ApiException {
        com.squareup.okhttp.Call call = createProjectUsingPOSTValidateBeforeCall(projectDTO, null, null);
        Type localVarReturnType = new TypeToken<ProjectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createProject (asynchronously)
     * 
     * @param projectDTO projectDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProjectUsingPOSTAsync(ProjectDTO projectDTO, final ApiCallback<ProjectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProjectUsingPOSTValidateBeforeCall(projectDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteProjectUsingDELETE */
    private com.squareup.okhttp.Call deleteProjectUsingDELETECall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectName" + "\\}", apiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProjectUsingDELETEValidateBeforeCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling deleteProjectUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteProjectUsingDELETECall(projectName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteProject
     * 
     * @param projectName projectName (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProjectUsingDELETE(String projectName) throws ApiException {
        deleteProjectUsingDELETEWithHttpInfo(projectName);
    }

    /**
     * deleteProject
     * 
     * @param projectName projectName (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProjectUsingDELETEWithHttpInfo(String projectName) throws ApiException {
        com.squareup.okhttp.Call call = deleteProjectUsingDELETEValidateBeforeCall(projectName, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteProject (asynchronously)
     * 
     * @param projectName projectName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProjectUsingDELETEAsync(String projectName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProjectUsingDELETEValidateBeforeCall(projectName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getAllProjectsUsingGET */
    private com.squareup.okhttp.Call getAllProjectsUsingGETCall(Boolean minimized, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (minimized != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "minimized", minimized));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllProjectsUsingGETValidateBeforeCall(Boolean minimized, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllProjectsUsingGETCall(minimized, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAllProjects
     * 
     * @param minimized minimized (optional, default to false)
     * @return List&lt;ProjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectDTO> getAllProjectsUsingGET(Boolean minimized) throws ApiException {
        ApiResponse<List<ProjectDTO>> resp = getAllProjectsUsingGETWithHttpInfo(minimized);
        return resp.getData();
    }

    /**
     * getAllProjects
     * 
     * @param minimized minimized (optional, default to false)
     * @return ApiResponse&lt;List&lt;ProjectDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectDTO>> getAllProjectsUsingGETWithHttpInfo(Boolean minimized) throws ApiException {
        com.squareup.okhttp.Call call = getAllProjectsUsingGETValidateBeforeCall(minimized, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllProjects (asynchronously)
     * 
     * @param minimized minimized (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllProjectsUsingGETAsync(Boolean minimized, final ApiCallback<List<ProjectDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllProjectsUsingGETValidateBeforeCall(minimized, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllSourcesForProjectUsingGET */
    private com.squareup.okhttp.Call getAllSourcesForProjectUsingGETCall(String projectName, Boolean assigned, Boolean minimized, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectName}/sources".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectName" + "\\}", apiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (assigned != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "assigned", assigned));
        if (minimized != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "minimized", minimized));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSourcesForProjectUsingGETValidateBeforeCall(String projectName, Boolean assigned, Boolean minimized, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling getAllSourcesForProjectUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllSourcesForProjectUsingGETCall(projectName, assigned, minimized, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAllSourcesForProject
     * 
     * @param projectName projectName (required)
     * @param assigned assigned (optional)
     * @param minimized minimized (optional, default to false)
     * @return ResponseEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseEntity getAllSourcesForProjectUsingGET(String projectName, Boolean assigned, Boolean minimized) throws ApiException {
        ApiResponse<ResponseEntity> resp = getAllSourcesForProjectUsingGETWithHttpInfo(projectName, assigned, minimized);
        return resp.getData();
    }

    /**
     * getAllSourcesForProject
     * 
     * @param projectName projectName (required)
     * @param assigned assigned (optional)
     * @param minimized minimized (optional, default to false)
     * @return ApiResponse&lt;ResponseEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseEntity> getAllSourcesForProjectUsingGETWithHttpInfo(String projectName, Boolean assigned, Boolean minimized) throws ApiException {
        com.squareup.okhttp.Call call = getAllSourcesForProjectUsingGETValidateBeforeCall(projectName, assigned, minimized, null, null);
        Type localVarReturnType = new TypeToken<ResponseEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllSourcesForProject (asynchronously)
     * 
     * @param projectName projectName (required)
     * @param assigned assigned (optional)
     * @param minimized minimized (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSourcesForProjectUsingGETAsync(String projectName, Boolean assigned, Boolean minimized, final ApiCallback<ResponseEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSourcesForProjectUsingGETValidateBeforeCall(projectName, assigned, minimized, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllSubjectsUsingGET */
    private com.squareup.okhttp.Call getAllSubjectsUsingGETCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectName}/subjects".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectName" + "\\}", apiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSubjectsUsingGETValidateBeforeCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling getAllSubjectsUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllSubjectsUsingGETCall(projectName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAllSubjects
     * 
     * @param projectName projectName (required)
     * @return List&lt;SubjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SubjectDTO> getAllSubjectsUsingGET(String projectName) throws ApiException {
        ApiResponse<List<SubjectDTO>> resp = getAllSubjectsUsingGETWithHttpInfo(projectName);
        return resp.getData();
    }

    /**
     * getAllSubjects
     * 
     * @param projectName projectName (required)
     * @return ApiResponse&lt;List&lt;SubjectDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SubjectDTO>> getAllSubjectsUsingGETWithHttpInfo(String projectName) throws ApiException {
        com.squareup.okhttp.Call call = getAllSubjectsUsingGETValidateBeforeCall(projectName, null, null);
        Type localVarReturnType = new TypeToken<List<SubjectDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllSubjects (asynchronously)
     * 
     * @param projectName projectName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSubjectsUsingGETAsync(String projectName, final ApiCallback<List<SubjectDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSubjectsUsingGETValidateBeforeCall(projectName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SubjectDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getProjectUsingGET */
    private com.squareup.okhttp.Call getProjectUsingGETCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectName" + "\\}", apiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectUsingGETValidateBeforeCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling getProjectUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getProjectUsingGETCall(projectName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getProject
     * 
     * @param projectName projectName (required)
     * @return ProjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectDTO getProjectUsingGET(String projectName) throws ApiException {
        ApiResponse<ProjectDTO> resp = getProjectUsingGETWithHttpInfo(projectName);
        return resp.getData();
    }

    /**
     * getProject
     * 
     * @param projectName projectName (required)
     * @return ApiResponse&lt;ProjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectDTO> getProjectUsingGETWithHttpInfo(String projectName) throws ApiException {
        com.squareup.okhttp.Call call = getProjectUsingGETValidateBeforeCall(projectName, null, null);
        Type localVarReturnType = new TypeToken<ProjectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getProject (asynchronously)
     * 
     * @param projectName projectName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectUsingGETAsync(String projectName, final ApiCallback<ProjectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectUsingGETValidateBeforeCall(projectName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRolesByProjectUsingGET */
    private com.squareup.okhttp.Call getRolesByProjectUsingGETCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectName}/roles".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectName" + "\\}", apiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRolesByProjectUsingGETValidateBeforeCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling getRolesByProjectUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRolesByProjectUsingGETCall(projectName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getRolesByProject
     * 
     * @param projectName projectName (required)
     * @return List&lt;RoleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RoleDTO> getRolesByProjectUsingGET(String projectName) throws ApiException {
        ApiResponse<List<RoleDTO>> resp = getRolesByProjectUsingGETWithHttpInfo(projectName);
        return resp.getData();
    }

    /**
     * getRolesByProject
     * 
     * @param projectName projectName (required)
     * @return ApiResponse&lt;List&lt;RoleDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RoleDTO>> getRolesByProjectUsingGETWithHttpInfo(String projectName) throws ApiException {
        com.squareup.okhttp.Call call = getRolesByProjectUsingGETValidateBeforeCall(projectName, null, null);
        Type localVarReturnType = new TypeToken<List<RoleDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getRolesByProject (asynchronously)
     * 
     * @param projectName projectName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRolesByProjectUsingGETAsync(String projectName, final ApiCallback<List<RoleDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRolesByProjectUsingGETValidateBeforeCall(projectName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RoleDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSourceTypesOfProjectUsingGET */
    private com.squareup.okhttp.Call getSourceTypesOfProjectUsingGETCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectName}/source-types".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectName" + "\\}", apiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSourceTypesOfProjectUsingGETValidateBeforeCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling getSourceTypesOfProjectUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSourceTypesOfProjectUsingGETCall(projectName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getSourceTypesOfProject
     * 
     * @param projectName projectName (required)
     * @return List&lt;SourceTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SourceTypeDTO> getSourceTypesOfProjectUsingGET(String projectName) throws ApiException {
        ApiResponse<List<SourceTypeDTO>> resp = getSourceTypesOfProjectUsingGETWithHttpInfo(projectName);
        return resp.getData();
    }

    /**
     * getSourceTypesOfProject
     * 
     * @param projectName projectName (required)
     * @return ApiResponse&lt;List&lt;SourceTypeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SourceTypeDTO>> getSourceTypesOfProjectUsingGETWithHttpInfo(String projectName) throws ApiException {
        com.squareup.okhttp.Call call = getSourceTypesOfProjectUsingGETValidateBeforeCall(projectName, null, null);
        Type localVarReturnType = new TypeToken<List<SourceTypeDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSourceTypesOfProject (asynchronously)
     * 
     * @param projectName projectName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSourceTypesOfProjectUsingGETAsync(String projectName, final ApiCallback<List<SourceTypeDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSourceTypesOfProjectUsingGETValidateBeforeCall(projectName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SourceTypeDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateProjectUsingPUT */
    private com.squareup.okhttp.Call updateProjectUsingPUTCall(ProjectDTO projectDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = projectDTO;
        
        // create path and map variables
        String localVarPath = "/api/projects".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProjectUsingPUTValidateBeforeCall(ProjectDTO projectDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectDTO' is set
        if (projectDTO == null) {
            throw new ApiException("Missing the required parameter 'projectDTO' when calling updateProjectUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateProjectUsingPUTCall(projectDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * updateProject
     * 
     * @param projectDTO projectDTO (required)
     * @return ProjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectDTO updateProjectUsingPUT(ProjectDTO projectDTO) throws ApiException {
        ApiResponse<ProjectDTO> resp = updateProjectUsingPUTWithHttpInfo(projectDTO);
        return resp.getData();
    }

    /**
     * updateProject
     * 
     * @param projectDTO projectDTO (required)
     * @return ApiResponse&lt;ProjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectDTO> updateProjectUsingPUTWithHttpInfo(ProjectDTO projectDTO) throws ApiException {
        com.squareup.okhttp.Call call = updateProjectUsingPUTValidateBeforeCall(projectDTO, null, null);
        Type localVarReturnType = new TypeToken<ProjectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateProject (asynchronously)
     * 
     * @param projectDTO projectDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProjectUsingPUTAsync(ProjectDTO projectDTO, final ApiCallback<ProjectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProjectUsingPUTValidateBeforeCall(projectDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
