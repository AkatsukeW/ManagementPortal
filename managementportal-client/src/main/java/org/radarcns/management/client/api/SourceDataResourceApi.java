/*
 * ManagementPortal API
 * ManagementPortal API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.radarcns.management.client.api;

import org.radarcns.management.client.ApiCallback;
import org.radarcns.management.client.ApiClient;
import org.radarcns.management.client.ApiException;
import org.radarcns.management.client.ApiResponse;
import org.radarcns.management.client.Configuration;
import org.radarcns.management.client.Pair;
import org.radarcns.management.client.ProgressRequestBody;
import org.radarcns.management.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.radarcns.management.client.model.SourceDataDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SourceDataResourceApi {
    private ApiClient apiClient;

    public SourceDataResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SourceDataResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createSourceDataUsingPOST */
    private com.squareup.okhttp.Call createSourceDataUsingPOSTCall(SourceDataDTO sourceDataDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sourceDataDTO;
        
        // create path and map variables
        String localVarPath = "/api/source-data".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSourceDataUsingPOSTValidateBeforeCall(SourceDataDTO sourceDataDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sourceDataDTO' is set
        if (sourceDataDTO == null) {
            throw new ApiException("Missing the required parameter 'sourceDataDTO' when calling createSourceDataUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSourceDataUsingPOSTCall(sourceDataDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * createSourceData
     * 
     * @param sourceDataDTO sourceDataDTO (required)
     * @return SourceDataDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SourceDataDTO createSourceDataUsingPOST(SourceDataDTO sourceDataDTO) throws ApiException {
        ApiResponse<SourceDataDTO> resp = createSourceDataUsingPOSTWithHttpInfo(sourceDataDTO);
        return resp.getData();
    }

    /**
     * createSourceData
     * 
     * @param sourceDataDTO sourceDataDTO (required)
     * @return ApiResponse&lt;SourceDataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SourceDataDTO> createSourceDataUsingPOSTWithHttpInfo(SourceDataDTO sourceDataDTO) throws ApiException {
        com.squareup.okhttp.Call call = createSourceDataUsingPOSTValidateBeforeCall(sourceDataDTO, null, null);
        Type localVarReturnType = new TypeToken<SourceDataDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createSourceData (asynchronously)
     * 
     * @param sourceDataDTO sourceDataDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSourceDataUsingPOSTAsync(SourceDataDTO sourceDataDTO, final ApiCallback<SourceDataDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSourceDataUsingPOSTValidateBeforeCall(sourceDataDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SourceDataDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteSourceDataUsingDELETE */
    private com.squareup.okhttp.Call deleteSourceDataUsingDELETECall(String sourceDataName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/source-data/{sourceDataName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sourceDataName" + "\\}", apiClient.escapeString(sourceDataName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSourceDataUsingDELETEValidateBeforeCall(String sourceDataName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sourceDataName' is set
        if (sourceDataName == null) {
            throw new ApiException("Missing the required parameter 'sourceDataName' when calling deleteSourceDataUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSourceDataUsingDELETECall(sourceDataName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteSourceData
     * 
     * @param sourceDataName sourceDataName (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSourceDataUsingDELETE(String sourceDataName) throws ApiException {
        deleteSourceDataUsingDELETEWithHttpInfo(sourceDataName);
    }

    /**
     * deleteSourceData
     * 
     * @param sourceDataName sourceDataName (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSourceDataUsingDELETEWithHttpInfo(String sourceDataName) throws ApiException {
        com.squareup.okhttp.Call call = deleteSourceDataUsingDELETEValidateBeforeCall(sourceDataName, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteSourceData (asynchronously)
     * 
     * @param sourceDataName sourceDataName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSourceDataUsingDELETEAsync(String sourceDataName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSourceDataUsingDELETEValidateBeforeCall(sourceDataName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getAllSourceDataUsingGET */
    private com.squareup.okhttp.Call getAllSourceDataUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/source-data".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSourceDataUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllSourceDataUsingGETCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAllSourceData
     * 
     * @return List&lt;SourceDataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SourceDataDTO> getAllSourceDataUsingGET() throws ApiException {
        ApiResponse<List<SourceDataDTO>> resp = getAllSourceDataUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * getAllSourceData
     * 
     * @return ApiResponse&lt;List&lt;SourceDataDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SourceDataDTO>> getAllSourceDataUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllSourceDataUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<SourceDataDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllSourceData (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSourceDataUsingGETAsync(final ApiCallback<List<SourceDataDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSourceDataUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SourceDataDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSourceDataUsingGET */
    private com.squareup.okhttp.Call getSourceDataUsingGETCall(String sourceDataName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/source-data/{sourceDataName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sourceDataName" + "\\}", apiClient.escapeString(sourceDataName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSourceDataUsingGETValidateBeforeCall(String sourceDataName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sourceDataName' is set
        if (sourceDataName == null) {
            throw new ApiException("Missing the required parameter 'sourceDataName' when calling getSourceDataUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSourceDataUsingGETCall(sourceDataName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getSourceData
     * 
     * @param sourceDataName sourceDataName (required)
     * @return SourceDataDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SourceDataDTO getSourceDataUsingGET(String sourceDataName) throws ApiException {
        ApiResponse<SourceDataDTO> resp = getSourceDataUsingGETWithHttpInfo(sourceDataName);
        return resp.getData();
    }

    /**
     * getSourceData
     * 
     * @param sourceDataName sourceDataName (required)
     * @return ApiResponse&lt;SourceDataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SourceDataDTO> getSourceDataUsingGETWithHttpInfo(String sourceDataName) throws ApiException {
        com.squareup.okhttp.Call call = getSourceDataUsingGETValidateBeforeCall(sourceDataName, null, null);
        Type localVarReturnType = new TypeToken<SourceDataDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSourceData (asynchronously)
     * 
     * @param sourceDataName sourceDataName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSourceDataUsingGETAsync(String sourceDataName, final ApiCallback<SourceDataDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSourceDataUsingGETValidateBeforeCall(sourceDataName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SourceDataDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateSourceDataUsingPUT */
    private com.squareup.okhttp.Call updateSourceDataUsingPUTCall(SourceDataDTO sourceDataDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sourceDataDTO;
        
        // create path and map variables
        String localVarPath = "/api/source-data".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSourceDataUsingPUTValidateBeforeCall(SourceDataDTO sourceDataDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sourceDataDTO' is set
        if (sourceDataDTO == null) {
            throw new ApiException("Missing the required parameter 'sourceDataDTO' when calling updateSourceDataUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSourceDataUsingPUTCall(sourceDataDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * updateSourceData
     * 
     * @param sourceDataDTO sourceDataDTO (required)
     * @return SourceDataDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SourceDataDTO updateSourceDataUsingPUT(SourceDataDTO sourceDataDTO) throws ApiException {
        ApiResponse<SourceDataDTO> resp = updateSourceDataUsingPUTWithHttpInfo(sourceDataDTO);
        return resp.getData();
    }

    /**
     * updateSourceData
     * 
     * @param sourceDataDTO sourceDataDTO (required)
     * @return ApiResponse&lt;SourceDataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SourceDataDTO> updateSourceDataUsingPUTWithHttpInfo(SourceDataDTO sourceDataDTO) throws ApiException {
        com.squareup.okhttp.Call call = updateSourceDataUsingPUTValidateBeforeCall(sourceDataDTO, null, null);
        Type localVarReturnType = new TypeToken<SourceDataDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateSourceData (asynchronously)
     * 
     * @param sourceDataDTO sourceDataDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSourceDataUsingPUTAsync(SourceDataDTO sourceDataDTO, final ApiCallback<SourceDataDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSourceDataUsingPUTValidateBeforeCall(sourceDataDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SourceDataDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
