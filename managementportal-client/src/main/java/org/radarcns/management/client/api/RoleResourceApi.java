/*
 * ManagementPortal API
 * ManagementPortal API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.radarcns.management.client.api;

import org.radarcns.management.client.ApiCallback;
import org.radarcns.management.client.ApiClient;
import org.radarcns.management.client.ApiException;
import org.radarcns.management.client.ApiResponse;
import org.radarcns.management.client.Configuration;
import org.radarcns.management.client.Pair;
import org.radarcns.management.client.ProgressRequestBody;
import org.radarcns.management.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.radarcns.management.client.model.RoleDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoleResourceApi {
    private ApiClient apiClient;

    public RoleResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoleResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createRoleUsingPOST */
    private com.squareup.okhttp.Call createRoleUsingPOSTCall(RoleDTO roleDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = roleDTO;
        
        // create path and map variables
        String localVarPath = "/api/roles".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRoleUsingPOSTValidateBeforeCall(RoleDTO roleDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'roleDTO' is set
        if (roleDTO == null) {
            throw new ApiException("Missing the required parameter 'roleDTO' when calling createRoleUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createRoleUsingPOSTCall(roleDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * createRole
     * 
     * @param roleDTO roleDTO (required)
     * @return RoleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoleDTO createRoleUsingPOST(RoleDTO roleDTO) throws ApiException {
        ApiResponse<RoleDTO> resp = createRoleUsingPOSTWithHttpInfo(roleDTO);
        return resp.getData();
    }

    /**
     * createRole
     * 
     * @param roleDTO roleDTO (required)
     * @return ApiResponse&lt;RoleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoleDTO> createRoleUsingPOSTWithHttpInfo(RoleDTO roleDTO) throws ApiException {
        com.squareup.okhttp.Call call = createRoleUsingPOSTValidateBeforeCall(roleDTO, null, null);
        Type localVarReturnType = new TypeToken<RoleDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createRole (asynchronously)
     * 
     * @param roleDTO roleDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRoleUsingPOSTAsync(RoleDTO roleDTO, final ApiCallback<RoleDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRoleUsingPOSTValidateBeforeCall(roleDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoleDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllAdminRolesUsingGET */
    private com.squareup.okhttp.Call getAllAdminRolesUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/roles/admin".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAdminRolesUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllAdminRolesUsingGETCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAllAdminRoles
     * 
     * @return List&lt;RoleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RoleDTO> getAllAdminRolesUsingGET() throws ApiException {
        ApiResponse<List<RoleDTO>> resp = getAllAdminRolesUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * getAllAdminRoles
     * 
     * @return ApiResponse&lt;List&lt;RoleDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RoleDTO>> getAllAdminRolesUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllAdminRolesUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<RoleDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllAdminRoles (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAdminRolesUsingGETAsync(final ApiCallback<List<RoleDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAdminRolesUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RoleDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllRolesUsingGET */
    private com.squareup.okhttp.Call getAllRolesUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/roles".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllRolesUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllRolesUsingGETCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAllRoles
     * 
     * @return List&lt;RoleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RoleDTO> getAllRolesUsingGET() throws ApiException {
        ApiResponse<List<RoleDTO>> resp = getAllRolesUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * getAllRoles
     * 
     * @return ApiResponse&lt;List&lt;RoleDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RoleDTO>> getAllRolesUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllRolesUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<RoleDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllRoles (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllRolesUsingGETAsync(final ApiCallback<List<RoleDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllRolesUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RoleDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRoleUsingGET */
    private com.squareup.okhttp.Call getRoleUsingGETCall(String projectName, String authorityName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/roles/{projectName}/{authorityName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectName" + "\\}", apiClient.escapeString(projectName.toString()))
        .replaceAll("\\{" + "authorityName" + "\\}", apiClient.escapeString(authorityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRoleUsingGETValidateBeforeCall(String projectName, String authorityName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling getRoleUsingGET(Async)");
        }
        
        // verify the required parameter 'authorityName' is set
        if (authorityName == null) {
            throw new ApiException("Missing the required parameter 'authorityName' when calling getRoleUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRoleUsingGETCall(projectName, authorityName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getRole
     * 
     * @param projectName projectName (required)
     * @param authorityName authorityName (required)
     * @return RoleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoleDTO getRoleUsingGET(String projectName, String authorityName) throws ApiException {
        ApiResponse<RoleDTO> resp = getRoleUsingGETWithHttpInfo(projectName, authorityName);
        return resp.getData();
    }

    /**
     * getRole
     * 
     * @param projectName projectName (required)
     * @param authorityName authorityName (required)
     * @return ApiResponse&lt;RoleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoleDTO> getRoleUsingGETWithHttpInfo(String projectName, String authorityName) throws ApiException {
        com.squareup.okhttp.Call call = getRoleUsingGETValidateBeforeCall(projectName, authorityName, null, null);
        Type localVarReturnType = new TypeToken<RoleDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getRole (asynchronously)
     * 
     * @param projectName projectName (required)
     * @param authorityName authorityName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRoleUsingGETAsync(String projectName, String authorityName, final ApiCallback<RoleDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRoleUsingGETValidateBeforeCall(projectName, authorityName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoleDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateRoleUsingPUT */
    private com.squareup.okhttp.Call updateRoleUsingPUTCall(RoleDTO roleDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = roleDTO;
        
        // create path and map variables
        String localVarPath = "/api/roles".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRoleUsingPUTValidateBeforeCall(RoleDTO roleDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'roleDTO' is set
        if (roleDTO == null) {
            throw new ApiException("Missing the required parameter 'roleDTO' when calling updateRoleUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateRoleUsingPUTCall(roleDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * updateRole
     * 
     * @param roleDTO roleDTO (required)
     * @return RoleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoleDTO updateRoleUsingPUT(RoleDTO roleDTO) throws ApiException {
        ApiResponse<RoleDTO> resp = updateRoleUsingPUTWithHttpInfo(roleDTO);
        return resp.getData();
    }

    /**
     * updateRole
     * 
     * @param roleDTO roleDTO (required)
     * @return ApiResponse&lt;RoleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoleDTO> updateRoleUsingPUTWithHttpInfo(RoleDTO roleDTO) throws ApiException {
        com.squareup.okhttp.Call call = updateRoleUsingPUTValidateBeforeCall(roleDTO, null, null);
        Type localVarReturnType = new TypeToken<RoleDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateRole (asynchronously)
     * 
     * @param roleDTO roleDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRoleUsingPUTAsync(RoleDTO roleDTO, final ApiCallback<RoleDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRoleUsingPUTValidateBeforeCall(roleDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoleDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
