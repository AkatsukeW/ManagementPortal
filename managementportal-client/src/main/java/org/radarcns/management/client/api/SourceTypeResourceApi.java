/*
 * ManagementPortal API
 * ManagementPortal API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.radarcns.management.client.api;

import org.radarcns.management.client.ApiCallback;
import org.radarcns.management.client.ApiClient;
import org.radarcns.management.client.ApiException;
import org.radarcns.management.client.ApiResponse;
import org.radarcns.management.client.Configuration;
import org.radarcns.management.client.Pair;
import org.radarcns.management.client.ProgressRequestBody;
import org.radarcns.management.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.radarcns.management.client.model.SourceTypeDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SourceTypeResourceApi {
    private ApiClient apiClient;

    public SourceTypeResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SourceTypeResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createSourceTypeUsingPOST */
    private com.squareup.okhttp.Call createSourceTypeUsingPOSTCall(SourceTypeDTO sourceTypeDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sourceTypeDTO;
        
        // create path and map variables
        String localVarPath = "/api/source-types".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSourceTypeUsingPOSTValidateBeforeCall(SourceTypeDTO sourceTypeDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sourceTypeDTO' is set
        if (sourceTypeDTO == null) {
            throw new ApiException("Missing the required parameter 'sourceTypeDTO' when calling createSourceTypeUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSourceTypeUsingPOSTCall(sourceTypeDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * createSourceType
     * 
     * @param sourceTypeDTO sourceTypeDTO (required)
     * @return SourceTypeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SourceTypeDTO createSourceTypeUsingPOST(SourceTypeDTO sourceTypeDTO) throws ApiException {
        ApiResponse<SourceTypeDTO> resp = createSourceTypeUsingPOSTWithHttpInfo(sourceTypeDTO);
        return resp.getData();
    }

    /**
     * createSourceType
     * 
     * @param sourceTypeDTO sourceTypeDTO (required)
     * @return ApiResponse&lt;SourceTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SourceTypeDTO> createSourceTypeUsingPOSTWithHttpInfo(SourceTypeDTO sourceTypeDTO) throws ApiException {
        com.squareup.okhttp.Call call = createSourceTypeUsingPOSTValidateBeforeCall(sourceTypeDTO, null, null);
        Type localVarReturnType = new TypeToken<SourceTypeDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createSourceType (asynchronously)
     * 
     * @param sourceTypeDTO sourceTypeDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSourceTypeUsingPOSTAsync(SourceTypeDTO sourceTypeDTO, final ApiCallback<SourceTypeDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSourceTypeUsingPOSTValidateBeforeCall(sourceTypeDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SourceTypeDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteSourceTypeUsingDELETE */
    private com.squareup.okhttp.Call deleteSourceTypeUsingDELETECall(String producer, String model, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/source-types/{producer}/{model}/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "producer" + "\\}", apiClient.escapeString(producer.toString()))
        .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSourceTypeUsingDELETEValidateBeforeCall(String producer, String model, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'producer' is set
        if (producer == null) {
            throw new ApiException("Missing the required parameter 'producer' when calling deleteSourceTypeUsingDELETE(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling deleteSourceTypeUsingDELETE(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteSourceTypeUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSourceTypeUsingDELETECall(producer, model, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteSourceType
     * 
     * @param producer producer (required)
     * @param model model (required)
     * @param version version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSourceTypeUsingDELETE(String producer, String model, String version) throws ApiException {
        deleteSourceTypeUsingDELETEWithHttpInfo(producer, model, version);
    }

    /**
     * deleteSourceType
     * 
     * @param producer producer (required)
     * @param model model (required)
     * @param version version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSourceTypeUsingDELETEWithHttpInfo(String producer, String model, String version) throws ApiException {
        com.squareup.okhttp.Call call = deleteSourceTypeUsingDELETEValidateBeforeCall(producer, model, version, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteSourceType (asynchronously)
     * 
     * @param producer producer (required)
     * @param model model (required)
     * @param version version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSourceTypeUsingDELETEAsync(String producer, String model, String version, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSourceTypeUsingDELETEValidateBeforeCall(producer, model, version, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getAllSourceTypesUsingGET */
    private com.squareup.okhttp.Call getAllSourceTypesUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/source-types".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSourceTypesUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllSourceTypesUsingGETCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAllSourceTypes
     * 
     * @return List&lt;SourceTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SourceTypeDTO> getAllSourceTypesUsingGET() throws ApiException {
        ApiResponse<List<SourceTypeDTO>> resp = getAllSourceTypesUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * getAllSourceTypes
     * 
     * @return ApiResponse&lt;List&lt;SourceTypeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SourceTypeDTO>> getAllSourceTypesUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllSourceTypesUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<SourceTypeDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllSourceTypes (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSourceTypesUsingGETAsync(final ApiCallback<List<SourceTypeDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSourceTypesUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SourceTypeDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSourceTypesUsingGET */
    private com.squareup.okhttp.Call getSourceTypesUsingGETCall(String producer, String model, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/source-types/{producer}/{model}/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "producer" + "\\}", apiClient.escapeString(producer.toString()))
        .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSourceTypesUsingGETValidateBeforeCall(String producer, String model, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'producer' is set
        if (producer == null) {
            throw new ApiException("Missing the required parameter 'producer' when calling getSourceTypesUsingGET(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling getSourceTypesUsingGET(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getSourceTypesUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSourceTypesUsingGETCall(producer, model, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getSourceTypes
     * 
     * @param producer producer (required)
     * @param model model (required)
     * @param version version (required)
     * @return SourceTypeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SourceTypeDTO getSourceTypesUsingGET(String producer, String model, String version) throws ApiException {
        ApiResponse<SourceTypeDTO> resp = getSourceTypesUsingGETWithHttpInfo(producer, model, version);
        return resp.getData();
    }

    /**
     * getSourceTypes
     * 
     * @param producer producer (required)
     * @param model model (required)
     * @param version version (required)
     * @return ApiResponse&lt;SourceTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SourceTypeDTO> getSourceTypesUsingGETWithHttpInfo(String producer, String model, String version) throws ApiException {
        com.squareup.okhttp.Call call = getSourceTypesUsingGETValidateBeforeCall(producer, model, version, null, null);
        Type localVarReturnType = new TypeToken<SourceTypeDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSourceTypes (asynchronously)
     * 
     * @param producer producer (required)
     * @param model model (required)
     * @param version version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSourceTypesUsingGETAsync(String producer, String model, String version, final ApiCallback<SourceTypeDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSourceTypesUsingGETValidateBeforeCall(producer, model, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SourceTypeDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSourceTypesUsingGET1 */
    private com.squareup.okhttp.Call getSourceTypesUsingGET1Call(String producer, String model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/source-types/{producer}/{model}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "producer" + "\\}", apiClient.escapeString(producer.toString()))
        .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSourceTypesUsingGET1ValidateBeforeCall(String producer, String model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'producer' is set
        if (producer == null) {
            throw new ApiException("Missing the required parameter 'producer' when calling getSourceTypesUsingGET1(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling getSourceTypesUsingGET1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSourceTypesUsingGET1Call(producer, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getSourceTypes
     * 
     * @param producer producer (required)
     * @param model model (required)
     * @return List&lt;SourceTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SourceTypeDTO> getSourceTypesUsingGET1(String producer, String model) throws ApiException {
        ApiResponse<List<SourceTypeDTO>> resp = getSourceTypesUsingGET1WithHttpInfo(producer, model);
        return resp.getData();
    }

    /**
     * getSourceTypes
     * 
     * @param producer producer (required)
     * @param model model (required)
     * @return ApiResponse&lt;List&lt;SourceTypeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SourceTypeDTO>> getSourceTypesUsingGET1WithHttpInfo(String producer, String model) throws ApiException {
        com.squareup.okhttp.Call call = getSourceTypesUsingGET1ValidateBeforeCall(producer, model, null, null);
        Type localVarReturnType = new TypeToken<List<SourceTypeDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSourceTypes (asynchronously)
     * 
     * @param producer producer (required)
     * @param model model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSourceTypesUsingGET1Async(String producer, String model, final ApiCallback<List<SourceTypeDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSourceTypesUsingGET1ValidateBeforeCall(producer, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SourceTypeDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSourceTypesUsingGET2 */
    private com.squareup.okhttp.Call getSourceTypesUsingGET2Call(String producer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/source-types/{producer}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "producer" + "\\}", apiClient.escapeString(producer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSourceTypesUsingGET2ValidateBeforeCall(String producer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'producer' is set
        if (producer == null) {
            throw new ApiException("Missing the required parameter 'producer' when calling getSourceTypesUsingGET2(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSourceTypesUsingGET2Call(producer, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getSourceTypes
     * 
     * @param producer producer (required)
     * @return List&lt;SourceTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SourceTypeDTO> getSourceTypesUsingGET2(String producer) throws ApiException {
        ApiResponse<List<SourceTypeDTO>> resp = getSourceTypesUsingGET2WithHttpInfo(producer);
        return resp.getData();
    }

    /**
     * getSourceTypes
     * 
     * @param producer producer (required)
     * @return ApiResponse&lt;List&lt;SourceTypeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SourceTypeDTO>> getSourceTypesUsingGET2WithHttpInfo(String producer) throws ApiException {
        com.squareup.okhttp.Call call = getSourceTypesUsingGET2ValidateBeforeCall(producer, null, null);
        Type localVarReturnType = new TypeToken<List<SourceTypeDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSourceTypes (asynchronously)
     * 
     * @param producer producer (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSourceTypesUsingGET2Async(String producer, final ApiCallback<List<SourceTypeDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSourceTypesUsingGET2ValidateBeforeCall(producer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SourceTypeDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateSourceTypeUsingPUT */
    private com.squareup.okhttp.Call updateSourceTypeUsingPUTCall(SourceTypeDTO sourceTypeDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sourceTypeDTO;
        
        // create path and map variables
        String localVarPath = "/api/source-types".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSourceTypeUsingPUTValidateBeforeCall(SourceTypeDTO sourceTypeDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sourceTypeDTO' is set
        if (sourceTypeDTO == null) {
            throw new ApiException("Missing the required parameter 'sourceTypeDTO' when calling updateSourceTypeUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSourceTypeUsingPUTCall(sourceTypeDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * updateSourceType
     * 
     * @param sourceTypeDTO sourceTypeDTO (required)
     * @return SourceTypeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SourceTypeDTO updateSourceTypeUsingPUT(SourceTypeDTO sourceTypeDTO) throws ApiException {
        ApiResponse<SourceTypeDTO> resp = updateSourceTypeUsingPUTWithHttpInfo(sourceTypeDTO);
        return resp.getData();
    }

    /**
     * updateSourceType
     * 
     * @param sourceTypeDTO sourceTypeDTO (required)
     * @return ApiResponse&lt;SourceTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SourceTypeDTO> updateSourceTypeUsingPUTWithHttpInfo(SourceTypeDTO sourceTypeDTO) throws ApiException {
        com.squareup.okhttp.Call call = updateSourceTypeUsingPUTValidateBeforeCall(sourceTypeDTO, null, null);
        Type localVarReturnType = new TypeToken<SourceTypeDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateSourceType (asynchronously)
     * 
     * @param sourceTypeDTO sourceTypeDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSourceTypeUsingPUTAsync(SourceTypeDTO sourceTypeDTO, final ApiCallback<SourceTypeDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSourceTypeUsingPUTValidateBeforeCall(sourceTypeDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SourceTypeDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
