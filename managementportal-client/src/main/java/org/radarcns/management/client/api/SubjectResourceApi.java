/*
 * ManagementPortal API
 * ManagementPortal API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.radarcns.management.client.api;

import org.radarcns.management.client.ApiCallback;
import org.radarcns.management.client.ApiClient;
import org.radarcns.management.client.ApiException;
import org.radarcns.management.client.ApiResponse;
import org.radarcns.management.client.Configuration;
import org.radarcns.management.client.Pair;
import org.radarcns.management.client.ProgressRequestBody;
import org.radarcns.management.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.radarcns.management.client.model.MinimalSourceDetailsDTO;
import org.radarcns.management.client.model.SubjectDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubjectResourceApi {
    private ApiClient apiClient;

    public SubjectResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubjectResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for assignSourcesUsingPOST */
    private com.squareup.okhttp.Call assignSourcesUsingPOSTCall(String login, MinimalSourceDetailsDTO sourceDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sourceDTO;
        
        // create path and map variables
        String localVarPath = "/api/subjects/{login}/sources".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "login" + "\\}", apiClient.escapeString(login.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignSourcesUsingPOSTValidateBeforeCall(String login, MinimalSourceDetailsDTO sourceDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling assignSourcesUsingPOST(Async)");
        }
        
        // verify the required parameter 'sourceDTO' is set
        if (sourceDTO == null) {
            throw new ApiException("Missing the required parameter 'sourceDTO' when calling assignSourcesUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = assignSourcesUsingPOSTCall(login, sourceDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * assignSources
     * 
     * @param login login (required)
     * @param sourceDTO sourceDTO (required)
     * @return MinimalSourceDetailsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MinimalSourceDetailsDTO assignSourcesUsingPOST(String login, MinimalSourceDetailsDTO sourceDTO) throws ApiException {
        ApiResponse<MinimalSourceDetailsDTO> resp = assignSourcesUsingPOSTWithHttpInfo(login, sourceDTO);
        return resp.getData();
    }

    /**
     * assignSources
     * 
     * @param login login (required)
     * @param sourceDTO sourceDTO (required)
     * @return ApiResponse&lt;MinimalSourceDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MinimalSourceDetailsDTO> assignSourcesUsingPOSTWithHttpInfo(String login, MinimalSourceDetailsDTO sourceDTO) throws ApiException {
        com.squareup.okhttp.Call call = assignSourcesUsingPOSTValidateBeforeCall(login, sourceDTO, null, null);
        Type localVarReturnType = new TypeToken<MinimalSourceDetailsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * assignSources (asynchronously)
     * 
     * @param login login (required)
     * @param sourceDTO sourceDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignSourcesUsingPOSTAsync(String login, MinimalSourceDetailsDTO sourceDTO, final ApiCallback<MinimalSourceDetailsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignSourcesUsingPOSTValidateBeforeCall(login, sourceDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MinimalSourceDetailsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createSubjectUsingPOST */
    private com.squareup.okhttp.Call createSubjectUsingPOSTCall(SubjectDTO subjectDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = subjectDTO;
        
        // create path and map variables
        String localVarPath = "/api/subjects".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSubjectUsingPOSTValidateBeforeCall(SubjectDTO subjectDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subjectDTO' is set
        if (subjectDTO == null) {
            throw new ApiException("Missing the required parameter 'subjectDTO' when calling createSubjectUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSubjectUsingPOSTCall(subjectDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * createSubject
     * 
     * @param subjectDTO subjectDTO (required)
     * @return SubjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubjectDTO createSubjectUsingPOST(SubjectDTO subjectDTO) throws ApiException {
        ApiResponse<SubjectDTO> resp = createSubjectUsingPOSTWithHttpInfo(subjectDTO);
        return resp.getData();
    }

    /**
     * createSubject
     * 
     * @param subjectDTO subjectDTO (required)
     * @return ApiResponse&lt;SubjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubjectDTO> createSubjectUsingPOSTWithHttpInfo(SubjectDTO subjectDTO) throws ApiException {
        com.squareup.okhttp.Call call = createSubjectUsingPOSTValidateBeforeCall(subjectDTO, null, null);
        Type localVarReturnType = new TypeToken<SubjectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createSubject (asynchronously)
     * 
     * @param subjectDTO subjectDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSubjectUsingPOSTAsync(SubjectDTO subjectDTO, final ApiCallback<SubjectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSubjectUsingPOSTValidateBeforeCall(subjectDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubjectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteSubjectUsingDELETE */
    private com.squareup.okhttp.Call deleteSubjectUsingDELETECall(String login, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/subjects/{login}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "login" + "\\}", apiClient.escapeString(login.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSubjectUsingDELETEValidateBeforeCall(String login, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling deleteSubjectUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSubjectUsingDELETECall(login, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteSubject
     * 
     * @param login login (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSubjectUsingDELETE(String login) throws ApiException {
        deleteSubjectUsingDELETEWithHttpInfo(login);
    }

    /**
     * deleteSubject
     * 
     * @param login login (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSubjectUsingDELETEWithHttpInfo(String login) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubjectUsingDELETEValidateBeforeCall(login, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteSubject (asynchronously)
     * 
     * @param login login (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubjectUsingDELETEAsync(String login, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubjectUsingDELETEValidateBeforeCall(login, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for discontinueSubjectUsingPUT */
    private com.squareup.okhttp.Call discontinueSubjectUsingPUTCall(SubjectDTO subjectDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = subjectDTO;
        
        // create path and map variables
        String localVarPath = "/api/subjects/discontinue".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call discontinueSubjectUsingPUTValidateBeforeCall(SubjectDTO subjectDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subjectDTO' is set
        if (subjectDTO == null) {
            throw new ApiException("Missing the required parameter 'subjectDTO' when calling discontinueSubjectUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = discontinueSubjectUsingPUTCall(subjectDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * discontinueSubject
     * 
     * @param subjectDTO subjectDTO (required)
     * @return SubjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubjectDTO discontinueSubjectUsingPUT(SubjectDTO subjectDTO) throws ApiException {
        ApiResponse<SubjectDTO> resp = discontinueSubjectUsingPUTWithHttpInfo(subjectDTO);
        return resp.getData();
    }

    /**
     * discontinueSubject
     * 
     * @param subjectDTO subjectDTO (required)
     * @return ApiResponse&lt;SubjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubjectDTO> discontinueSubjectUsingPUTWithHttpInfo(SubjectDTO subjectDTO) throws ApiException {
        com.squareup.okhttp.Call call = discontinueSubjectUsingPUTValidateBeforeCall(subjectDTO, null, null);
        Type localVarReturnType = new TypeToken<SubjectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * discontinueSubject (asynchronously)
     * 
     * @param subjectDTO subjectDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call discontinueSubjectUsingPUTAsync(SubjectDTO subjectDTO, final ApiCallback<SubjectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = discontinueSubjectUsingPUTValidateBeforeCall(subjectDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubjectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllSubjectsUsingGET1 */
    private com.squareup.okhttp.Call getAllSubjectsUsingGET1Call(String projectName, String externalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/subjects".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (projectName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "projectName", projectName));
        if (externalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalId", externalId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSubjectsUsingGET1ValidateBeforeCall(String projectName, String externalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllSubjectsUsingGET1Call(projectName, externalId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAllSubjects
     * 
     * @param projectName projectName (optional)
     * @param externalId externalId (optional)
     * @return List&lt;SubjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SubjectDTO> getAllSubjectsUsingGET1(String projectName, String externalId) throws ApiException {
        ApiResponse<List<SubjectDTO>> resp = getAllSubjectsUsingGET1WithHttpInfo(projectName, externalId);
        return resp.getData();
    }

    /**
     * getAllSubjects
     * 
     * @param projectName projectName (optional)
     * @param externalId externalId (optional)
     * @return ApiResponse&lt;List&lt;SubjectDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SubjectDTO>> getAllSubjectsUsingGET1WithHttpInfo(String projectName, String externalId) throws ApiException {
        com.squareup.okhttp.Call call = getAllSubjectsUsingGET1ValidateBeforeCall(projectName, externalId, null, null);
        Type localVarReturnType = new TypeToken<List<SubjectDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllSubjects (asynchronously)
     * 
     * @param projectName projectName (optional)
     * @param externalId externalId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSubjectsUsingGET1Async(String projectName, String externalId, final ApiCallback<List<SubjectDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSubjectsUsingGET1ValidateBeforeCall(projectName, externalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SubjectDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSubjectSourcesUsingGET */
    private com.squareup.okhttp.Call getSubjectSourcesUsingGETCall(String login, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/subjects/{login}/sources".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "login" + "\\}", apiClient.escapeString(login.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubjectSourcesUsingGETValidateBeforeCall(String login, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling getSubjectSourcesUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSubjectSourcesUsingGETCall(login, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getSubjectSources
     * 
     * @param login login (required)
     * @return List&lt;MinimalSourceDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MinimalSourceDetailsDTO> getSubjectSourcesUsingGET(String login) throws ApiException {
        ApiResponse<List<MinimalSourceDetailsDTO>> resp = getSubjectSourcesUsingGETWithHttpInfo(login);
        return resp.getData();
    }

    /**
     * getSubjectSources
     * 
     * @param login login (required)
     * @return ApiResponse&lt;List&lt;MinimalSourceDetailsDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MinimalSourceDetailsDTO>> getSubjectSourcesUsingGETWithHttpInfo(String login) throws ApiException {
        com.squareup.okhttp.Call call = getSubjectSourcesUsingGETValidateBeforeCall(login, null, null);
        Type localVarReturnType = new TypeToken<List<MinimalSourceDetailsDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSubjectSources (asynchronously)
     * 
     * @param login login (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubjectSourcesUsingGETAsync(String login, final ApiCallback<List<MinimalSourceDetailsDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubjectSourcesUsingGETValidateBeforeCall(login, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MinimalSourceDetailsDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSubjectUsingGET */
    private com.squareup.okhttp.Call getSubjectUsingGETCall(String login, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/subjects/{login}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "login" + "\\}", apiClient.escapeString(login.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubjectUsingGETValidateBeforeCall(String login, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling getSubjectUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSubjectUsingGETCall(login, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getSubject
     * 
     * @param login login (required)
     * @return SubjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubjectDTO getSubjectUsingGET(String login) throws ApiException {
        ApiResponse<SubjectDTO> resp = getSubjectUsingGETWithHttpInfo(login);
        return resp.getData();
    }

    /**
     * getSubject
     * 
     * @param login login (required)
     * @return ApiResponse&lt;SubjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubjectDTO> getSubjectUsingGETWithHttpInfo(String login) throws ApiException {
        com.squareup.okhttp.Call call = getSubjectUsingGETValidateBeforeCall(login, null, null);
        Type localVarReturnType = new TypeToken<SubjectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSubject (asynchronously)
     * 
     * @param login login (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubjectUsingGETAsync(String login, final ApiCallback<SubjectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubjectUsingGETValidateBeforeCall(login, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubjectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateSubjectUsingPUT */
    private com.squareup.okhttp.Call updateSubjectUsingPUTCall(SubjectDTO subjectDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = subjectDTO;
        
        // create path and map variables
        String localVarPath = "/api/subjects".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSubjectUsingPUTValidateBeforeCall(SubjectDTO subjectDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subjectDTO' is set
        if (subjectDTO == null) {
            throw new ApiException("Missing the required parameter 'subjectDTO' when calling updateSubjectUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSubjectUsingPUTCall(subjectDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * updateSubject
     * 
     * @param subjectDTO subjectDTO (required)
     * @return SubjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubjectDTO updateSubjectUsingPUT(SubjectDTO subjectDTO) throws ApiException {
        ApiResponse<SubjectDTO> resp = updateSubjectUsingPUTWithHttpInfo(subjectDTO);
        return resp.getData();
    }

    /**
     * updateSubject
     * 
     * @param subjectDTO subjectDTO (required)
     * @return ApiResponse&lt;SubjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubjectDTO> updateSubjectUsingPUTWithHttpInfo(SubjectDTO subjectDTO) throws ApiException {
        com.squareup.okhttp.Call call = updateSubjectUsingPUTValidateBeforeCall(subjectDTO, null, null);
        Type localVarReturnType = new TypeToken<SubjectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateSubject (asynchronously)
     * 
     * @param subjectDTO subjectDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSubjectUsingPUTAsync(SubjectDTO subjectDTO, final ApiCallback<SubjectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSubjectUsingPUTValidateBeforeCall(subjectDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubjectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
