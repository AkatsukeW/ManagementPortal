/*
 * ManagementPortal API
 * ManagementPortal API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.radarcns.management.client.api;

import org.radarcns.management.client.ApiException;
import org.radarcns.management.client.model.KeyAndPasswordVM;
import org.radarcns.management.client.model.ResponseEntity;
import org.radarcns.management.client.model.UserDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountResourceApi
 */
@Ignore
public class AccountResourceApiTest {

    private final AccountResourceApi api = new AccountResourceApi();

    
    /**
     * activateAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateAccountUsingGETTest() throws ApiException {
        String key = null;
        String response = api.activateAccountUsingGET(key);

        // TODO: test validations
    }
    
    /**
     * changePassword
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordUsingPOSTTest() throws ApiException {
        String password = null;
        ResponseEntity response = api.changePasswordUsingPOST(password);

        // TODO: test validations
    }
    
    /**
     * finishPasswordReset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void finishPasswordResetUsingPOSTTest() throws ApiException {
        KeyAndPasswordVM keyAndPassword = null;
        String response = api.finishPasswordResetUsingPOST(keyAndPassword);

        // TODO: test validations
    }
    
    /**
     * getAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountUsingGETTest() throws ApiException {
        UserDTO response = api.getAccountUsingGET();

        // TODO: test validations
    }
    
    /**
     * isAuthenticated
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isAuthenticatedUsingGETTest() throws ApiException {
        String response = api.isAuthenticatedUsingGET();

        // TODO: test validations
    }
    
    /**
     * requestPasswordReset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestPasswordResetUsingPOSTTest() throws ApiException {
        String mail = null;
        ResponseEntity response = api.requestPasswordResetUsingPOST(mail);

        // TODO: test validations
    }
    
    /**
     * saveAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveAccountUsingPOSTTest() throws ApiException {
        UserDTO userDTO = null;
        ResponseEntity response = api.saveAccountUsingPOST(userDTO);

        // TODO: test validations
    }
    
}
