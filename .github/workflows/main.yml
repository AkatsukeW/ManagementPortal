# Continuous integration, including test and integration test
name: Main

# Run in master and dev branches and in all pull requests to those branches
on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  DOCKER_IMAGE: radarbase/management-portal

jobs:
  # Build and test the code
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Use Node.js 15
        uses: actions/setup-node@v1
        with:
          node-version: 15

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-java-${{ hashFiles('**/build.gradle', '**/gradle.properties', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-java-

      - name: Install Yarn dependencies
        run: yarn install

      - name: Yarn build
        run: yarn run webpack:build

      - name: Yarn check
        run: yarn test

      # Compile the code
      - name: Compile java
        run: ./gradlew assemble

      # Gradle check
      - name: Gradle check
        id: gradle-check
        if: always()
        run: ./gradlew check

      - name: Codacy
        if: steps.gradle-check.outcome != 'cancelled'
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: ./gradlew sendCoverageToCodacy

      - name: End to end tests
        id: e2e
        run: |
          cp src/test/resources/config/keystore.p12 src/main/resources/config/keystore.p12
          ./gradlew bootRun &>mp.log </dev/null &
          BOOTRUN_PROCESS=$!
          yarn run install:webdriver
          yarn run wait-for-managementportal
          ./gradlew generateOpenApiSpec
          yarn e2e
          kill $BOOTRUN_PROCESS

      - uses: actions/upload-artifact@v2
        if: steps.e2e.outcome == 'success' || steps.e2e.outcome == 'failure'
        with:
          name: openapi-spec
          path: build/swagger-spec/swagger.json

      - uses: actions/upload-artifact@v2
        if: steps.e2e.outcome == 'success' || steps.e2e.outcome == 'failure'
        with:
          name: managementportal-logs
          path: mp.log

      - name: Has SNAPSHOT version
        id: is-snapshot
        if: github.ref == 'refs/heads/dev'
        run: grep "version =\\? \\?'.*-SNAPSHOT'" build.gradle

      - name: Install gpg secret key
        if: steps.is-snapshot.outcome == 'success'
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Publish to Maven Central
        if: steps.is-snapshot.outcome == 'success'
        env:
          OSSRH_USER: ${{ secrets.OSSRH_USER }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: ./gradlew -Psigning.gnupg.keyName=${{ secrets.OSSRH_GPG_SECRET_KEY_ID }} -Psigning.gnupg.executable=gpg -Psigning.gnupg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} publish

  # Check that the docker image builds correctly
  docker:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Check whether unity activation requests should be done
        id: docker_check_secret
        run: |
          echo "IS_DOCKER_SECRET_SET: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}"
          echo "::set-output name=IS_DOCKER_SECRET_SET::${{ secrets.DOCKERHUB_USERNAME != ''  && secrets.DOCKERHUB_TOKEN != '' }}"

      - name: Login to Docker Hub
        if: steps.docker_check_secret.outputs.IS_DOCKER_SECRET_SET == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Add Docker labels and tags
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ${{ env.DOCKER_IMAGE }}

      # Setup docker build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker build parameters
        id: docker_params
        run: |
          if [ "${{ github.event_name == 'pull_request' }}" = "true" ]; then
            echo "::set-output name=push::false"
            echo "::set-output name=load::true"
            echo "::set-output name=platforms::linux/amd64"
          else
            echo "::set-output name=push::true"
            echo "::set-output name=load::false"
            echo "::set-output name=platforms::linux/amd64,linux/arm64"
          fi
      - name: Build docker
        uses: docker/build-push-action@v2
        with:
          load: ${{ steps.docker_params.load }}
          push: ${{ steps.docker_params.push }}
          platforms: ${{ steps.docker_params.platforms }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          # Use runtime labels from docker_meta as well as fixed labels
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            maintainer=Joris Borgdorff <joris@thehyve.nl>
            org.opencontainers.image.authors=Joris Borgdorff <joris@thehyve.nl>
            org.opencontainers.image.vendor=RADAR-base
            org.opencontainers.image.licenses=Apache-2.0

      - name: Pull docker image
        if: steps.docker_params.load == 'false'
        run: docker pull ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }}

      - name: Inspect docker image
        run: docker image inspect ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }}

      - name: Check docker image
        run: docker run --rm ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }} curl --help
