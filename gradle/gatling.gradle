apply plugin: 'scala'

ext.gatlingSrc = "${project.rootDir.absolutePath}/src/test/gatling"
ext.gatlingSimulations = file("${gatlingSrc}/simulations")


sourceSets {
    test {
        scala {
            srcDirs = [gatlingSimulations]
        }
    }
}

task manifestJar(dependsOn: 'compileTestScala',type: Jar) {
    from configurations.testCompile
    archiveName 'gatlingBooter.jar'
    doFirst {
        manifest {
            // uri is just needed for Windows-compatibility
            attributes 'Class-Path': configurations.testCompile.files.collect{ project.uri(it) }.join(' ')
        }
    }
}

task gatlingRunAll(dependsOn: 'manifestJar') {
    group = 'gatling'
    description = 'Run all available Gatling simulations.'

    def tree = fileTree(dir: gatlingSimulations)
    tree.include '**/*.scala'
    tree.each {
        def gatlingClass = it.name.replaceFirst(".scala", "")
        gatlingRunAll.dependsOn "gatlingRun${gatlingClass}"
    }
}

tasks.addRule("Pattern: gatlingRun<ID>") { String taskName ->
    if (taskName.startsWith("gatlingRun") && taskName != "gatlingRunAll") {
        task(taskName, type: JavaExec) {

            standardInput = System.in

            final def sourceSet = sourceSets.test

            classpath sourceSet.output + files(manifestJar.archivePath) + files("${gatlingSrc}/conf")
            main = "io.gatling.app.Gatling"

            environment GATLING_HOME:''

            def className = taskName - 'gatlingRun'

            args '-df', "${gatlingSrc}/data"
            args '-rf', "${project.buildDir.absolutePath}/reports/gatling"
            args '-bdf', "${gatlingSrc}/bodies"
            args '-sf', gatlingSimulations
            args '-m'
            args '-s', className
        }
    }
}

